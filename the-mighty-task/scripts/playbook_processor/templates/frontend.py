"""
Templates Frontend
==================

Templates universales para arquitectura frontend, design systems y dependencias.
"""

def create_design_system_template(theme, date_str, filename):
    """Marco de referencia para sistemas de dise√±o"""
    return f'''# Sistema de Dise√±o - Marco de Referencia

**Sesi√≥n:** {theme}  
**Fecha:** {date_str}  
**Marco Universal:** Sistema de Dise√±o  
**Referencia:** [playbooks/documentation_playbooks/{filename}](../../../playbooks/documentation_playbooks/{filename})

---

## üéØ Prop√≥sito del Marco

Este documento sirve como **marco de referencia universal** para sistemas de dise√±o, adaptable a cualquier tecnolog√≠a o framework.

### Decisiones Clave a Capturar
- **Filosof√≠a de dise√±o** adoptada para el proyecto
- **Tokens de dise√±o** definidos y su justificaci√≥n
- **Componentes base** y su jerarqu√≠a
- **Patrones de interacci√≥n** establecidos
- **Herramientas** elegidas y por qu√©

---

## üèóÔ∏è Fundamentos del Sistema

### Filosof√≠a de Dise√±o
**Decisi√≥n:** [Documentar la filosof√≠a de dise√±o elegida]  
**Opciones consideradas:**
- Material Design, Human Interface Guidelines, Atomic Design, Custom
- Razones para la elecci√≥n
- Principios rectores del proyecto

### Tokens de Dise√±o
**Decisi√≥n:** [Definir tokens fundamentales]  

#### Colores
```css
/* Ejemplo - adaptar a tu stack */
--primary: [DEFINIR];
--secondary: [DEFINIR];
--accent: [DEFINIR];
```

#### Tipograf√≠a
- **Fuente principal:** [DECIDIR]
- **Escala tipogr√°fica:** [DEFINIR]
- **Pesos utilizados:** [ESPECIFICAR]

#### Espaciado
```css
/* Sistema de espaciado */
--space-xs: [DEFINIR];
--space-sm: [DEFINIR];
--space-md: [DEFINIR];
```

---

## üß© Arquitectura de Componentes

### Componentes At√≥micos
**Decisi√≥n:** [Listar componentes base identificados]
- Botones: [Variantes y estados]
- Inputs: [Tipos y validaciones]
- Typography: [Elementos y jerarqu√≠as]

### Componentes Moleculares
**Decisi√≥n:** [Componentes compuestos clave]
- Forms: [Patrones de formulario]
- Cards: [Tipos de tarjeta]
- Navigation: [Patrones de navegaci√≥n]

### Plantillas y P√°ginas
**Decisi√≥n:** [Layouts principales]
- Layout principal: [Estructura]
- P√°ginas tipo: [Patrones identificados]

---

## üîß Implementaci√≥n T√©cnica

### Stack Tecnol√≥gico
**Decisi√≥n:** [Tecnolog√≠as elegidas para el design system]

#### Herramientas de Dise√±o
- **Design tool:** [Figma, Sketch, Adobe XD, etc.]
- **Prototipado:** [Herramienta elegida]
- **Documentaci√≥n:** [Storybook, Docusaurus, custom]

#### Stack de Desarrollo
- **Framework:** [React, Vue, Angular, Web Components, etc.]
- **Styling:** [CSS-in-JS, Sass, PostCSS, Tailwind, etc.]
- **Bundler:** [Webpack, Vite, Parcel, etc.]

### Arquitectura del C√≥digo
```
[DEFINIR estructura de carpetas y organizaci√≥n]
```

---

## üì± Responsive & Accessibility

### Estrategia Responsive
**Decisi√≥n:** [Enfoque responsive elegido]
- **Breakpoints:** [Definir breakpoints]
- **Mobile-first:** [S√≠/No y justificaci√≥n]
- **Componentes adaptativos:** [Estrategia]

### Accesibilidad
**Decisi√≥n:** [Est√°ndar de accesibilidad adoptado]
- **WCAG Level:** [AA, AAA]
- **Testing tools:** [Herramientas de testing]
- **Checklist:** [Criterios espec√≠ficos]

---

## üöÄ Implementaci√≥n y Mantenimiento

### Flujo de Desarrollo
**Decisi√≥n:** [Proceso de contribuci√≥n al design system]
1. [Paso 1 del proceso]
2. [Paso 2 del proceso]
3. [Paso 3 del proceso]

### Versionado
**Decisi√≥n:** [Estrategia de versionado]
- **Semantic versioning:** [C√≥mo se aplica]
- **Breaking changes:** [C√≥mo se manejan]
- **Migration guides:** [Proceso]

### Testing
**Decisi√≥n:** [Estrategia de testing para componentes]
- **Unit tests:** [Framework y scope]
- **Visual regression:** [Herramientas]
- **Cross-browser:** [Estrategia]

---

## üìä M√©tricas y Adopci√≥n

### KPIs del Sistema
**Decisi√≥n:** [M√©tricas para medir √©xito]
- Adopci√≥n por equipos: [C√≥mo medir]
- Consistencia: [M√©tricas de consistencia]
- Performance: [Benchmarks]

### Gobernanza
**Decisi√≥n:** [Modelo de gobierno del design system]
- **Design System Team:** [Estructura]
- **Contribuci√≥n:** [Proceso de contribuci√≥n]
- **Evoluci√≥n:** [Proceso de evoluci√≥n]

---

## üîÑ Evoluci√≥n y Roadmap

### Fases de Implementaci√≥n
1. **Fase 1:** [Componentes base y tokens]
2. **Fase 2:** [Componentes compuestos]
3. **Fase 3:** [Templates y patrones]
4. **Fase 4:** [Tooling y automatizaci√≥n]

### Pr√≥ximos Pasos
- [ ] [Tarea inmediata 1]
- [ ] [Tarea inmediata 2]
- [ ] [Tarea inmediata 3]

---

*Marco generado por The Mighty Task System*  
*Consultar playbook original: `playbooks/documentation_playbooks/{filename}`*
'''

def create_frontend_architecture_template(theme, date_str, filename):
    """Marco de referencia para arquitectura frontend"""
    return f'''# Arquitectura Frontend - Marco de Referencia

**Sesi√≥n:** {theme}  
**Fecha:** {date_str}  
**Marco Universal:** Arquitectura Frontend  
**Referencia:** [playbooks/documentation_playbooks/{filename}](../../../playbooks/documentation_playbooks/{filename})

---

## üéØ Prop√≥sito del Marco

Este documento sirve como **marco de referencia universal** para arquitecturas frontend, adaptable a cualquier framework o tecnolog√≠a.

### Decisiones Clave a Capturar
- **Framework principal** y justificaci√≥n
- **Arquitectura de componentes** y patrones
- **Gesti√≥n de estado** elegida
- **Routing** y navegaci√≥n
- **Build system** y herramientas

---

## üèóÔ∏è Framework y Stack Principal

### Framework Elegido
**Decisi√≥n:** [Framework frontend principal]
- **Opciones:** React, Vue, Angular, Svelte, Solid, etc.
- **Versi√≥n:** [Versi√≥n espec√≠fica]
- **Justificaci√≥n:** [Por qu√© se eligi√≥ este framework]

### Stack Complementario
**Decisi√≥n:** [Herramientas del ecosistema]
- **TypeScript:** [S√≠/No y justificaci√≥n]
- **Bundler:** [Vite, Webpack, Parcel, etc.]
- **Testing:** [Jest, Vitest, Cypress, etc.]

---

## üß© Arquitectura de Componentes

### Patr√≥n Arquitect√≥nico
**Decisi√≥n:** [Patr√≥n de organizaci√≥n elegido]
- **Container/Presentational** / **Atomic Design** / **Feature-based** / **Custom**
- **Justificaci√≥n:** [Por qu√© este enfoque]

### Estructura de Carpetas
```
[DEFINIR estructura del proyecto]
```

### Convenciones de Naming
**Decisi√≥n:** [Convenciones establecidas]
- **Componentes:** [PascalCase, kebab-case, etc.]
- **Archivos:** [Naming convention]
- **Props/Events:** [Naming patterns]

---

## üîÑ Gesti√≥n de Estado

### Estrategia Principal
**Decisi√≥n:** [Soluci√≥n de state management]
- **Local:** [useState, ref, reactive, etc.]
- **Global:** [Redux, Pinia, Zustand, Context, etc.]
- **Server State:** [React Query, SWR, Apollo, etc.]

### Patr√≥n de Datos
**Decisi√≥n:** [Flujo de datos implementado]
- **Unidirectional** / **Bidirectional**
- **Immutable updates:** [S√≠/No y herramientas]
- **State normalization:** [Estrategia]

---

## üõ£Ô∏è Routing y Navegaci√≥n

### Sistema de Routing
**Decisi√≥n:** [Router elegido]
- **Router:** [React Router, Vue Router, Angular Router, etc.]
- **Tipo:** [Hash, History, Memory]
- **Nested routing:** [S√≠/No]

### Estructura de Rutas
```javascript
// [DEFINIR estructura de routing]
```

### Guards y Middleware
**Decisi√≥n:** [Protecci√≥n de rutas]
- **Authentication:** [Estrategia]
- **Authorization:** [Levels]
- **Loading states:** [C√≥mo se manejan]

---

## üé® Styling y UI

### Estrategia de Estilos
**Decisi√≥n:** [Enfoque de styling]
- **CSS-in-JS** / **CSS Modules** / **Utility-first** / **Preprocessors**
- **Framework:** [Styled-components, Tailwind, Emotion, etc.]

### Sistema de Temas
**Decisi√≥n:** [Theming approach]
- **CSS Custom Properties** / **JS Themes** / **Design Tokens**
- **Dark mode:** [S√≠/No y implementaci√≥n]

### Responsive Design
**Decisi√≥n:** [Estrategia responsive]
- **Mobile-first:** [S√≠/No]
- **Breakpoints:** [Definidos]
- **Layout system:** [Grid, Flexbox, etc.]

---

## üîå Data Fetching

### Estrategia de APIs
**Decisi√≥n:** [Approach para consumir APIs]
- **HTTP Client:** [fetch, axios, ky, etc.]
- **GraphQL:** [Apollo, urql, etc.]
- **Real-time:** [WebSockets, SSE, etc.]

### Caching y Optimizaci√≥n
**Decisi√≥n:** [Estrategia de cache]
- **Browser cache:** [Headers y estrategia]
- **Memory cache:** [Herramientas]
- **Offline support:** [Service Workers, etc.]

---

## ‚ö° Performance

### Optimizaciones Aplicadas
**Decisi√≥n:** [T√©cnicas de optimizaci√≥n]
- **Code splitting:** [Route-based, Component-based]
- **Lazy loading:** [Components, Images, etc.]
- **Bundle optimization:** [Tree shaking, etc.]

### M√©tricas Objetivo
**Decisi√≥n:** [KPIs de performance]
- **Core Web Vitals:** [Targets espec√≠ficos]
- **Bundle size:** [L√≠mites definidos]
- **Load time:** [Objetivos]

---

## üß™ Testing Strategy

### Niveles de Testing
**Decisi√≥n:** [Tipos de test implementados]

#### Unit Tests
- **Framework:** [Jest, Vitest, etc.]
- **Utilities:** [Testing Library, Enzyme, etc.]
- **Coverage:** [Porcentaje objetivo]

#### Integration Tests
- **Component integration:** [Estrategia]
- **API integration:** [Mocking vs real]

#### E2E Tests
- **Tool:** [Cypress, Playwright, etc.]
- **Critical paths:** [Flows principales]

---

## üì± Progressive Web App

### PWA Features
**Decisi√≥n:** [Caracter√≠sticas PWA implementadas]
- **Service Worker:** [S√≠/No y estrategia]
- **Manifest:** [Configuraci√≥n]
- **Offline support:** [Nivel de soporte]

### Installation
**Decisi√≥n:** [Installability]
- **App-like experience:** [Nivel]
- **Platform integration:** [Notifications, etc.]

---

## üöÄ Build y Deployment

### Build Process
**Decisi√≥n:** [Configuraci√≥n de build]
- **Development:** [Hot reload, etc.]
- **Production:** [Optimizaciones]
- **Preview:** [Staging builds]

### Deployment Strategy
**Decisi√≥n:** [Estrategia de deploy]
- **Static hosting:** [Vercel, Netlify, etc.]
- **CDN:** [CloudFront, etc.]
- **Environment configs:** [Manejo]

---

## üîÑ Pr√≥ximos Pasos

### Setup Inmediato
- [ ] [Configuraci√≥n inicial del framework]
- [ ] [Setup del bundler y herramientas]
- [ ] [Estructura base del proyecto]

### Desarrollo Core
- [ ] [Componentes base]
- [ ] [Routing setup]
- [ ] [State management]

### Optimizaci√≥n
- [ ] [Performance audit]
- [ ] [SEO optimization]
- [ ] [Accessibility review]

---

*Marco generado por The Mighty Task System*  
*Consultar playbook original: `playbooks/documentation_playbooks/{filename}`*
'''

def create_frontend_dependencies_template(theme, date_str, filename):
    """Marco de referencia para dependencias frontend"""
    return f'''# Dependencias Frontend - Marco de Referencia

**Sesi√≥n:** {theme}  
**Fecha:** {date_str}  
**Marco Universal:** Gesti√≥n de Dependencias Frontend  
**Referencia:** [playbooks/documentation_playbooks/{filename}](../../../playbooks/documentation_playbooks/{filename})

---

## üéØ Prop√≥sito del Marco

Este documento sirve como **marco de referencia universal** para la gesti√≥n de dependencias en proyectos frontend.

### Decisiones Clave a Capturar
- **Package manager** elegido
- **Dependencias core** y justificaci√≥n
- **Versionado** y compatibility
- **Bundle size** management
- **Security** y updates

---

## üì¶ Package Manager

### Herramienta Elegida
**Decisi√≥n:** [Package manager seleccionado]
- **npm** / **yarn** / **pnpm** / **bun**
- **Versi√≥n:** [Versi√≥n espec√≠fica]
- **Justificaci√≥n:** [Razones para la elecci√≥n]

### Configuraci√≥n
```json
{{
  "packageManager": "[ESPECIFICAR]",
  "engines": {{
    "node": "[VERSION]",
    "npm": "[VERSION]"
  }}
}}
```

---

## üèóÔ∏è Dependencias Core

### Framework Principal
**Decisi√≥n:** [Framework y versi√≥n]
```json
{{
  "dependencies": {{
    "[framework]": "[version]"
  }}
}}
```

### Runtime Essentials
**Decisi√≥n:** [Dependencias runtime cr√≠ticas]
- **Router:** [react-router, vue-router, etc.]
- **State Management:** [redux, pinia, zustand, etc.]
- **HTTP Client:** [axios, fetch wrapper, etc.]

### Build Tools
**Decisi√≥n:** [Herramientas de build]
- **Bundler:** [vite, webpack, parcel, etc.]
- **Transpiler:** [babel, swc, esbuild, etc.]
- **TypeScript:** [Si aplica y configuraci√≥n]

---

## üé® UI y Styling

### Biblioteca de Componentes
**Decisi√≥n:** [UI library elegida]
- **Material-UI** / **Ant Design** / **Chakra UI** / **Custom**
- **Justificaci√≥n:** [Por qu√© esta elecci√≥n]
- **Customization:** [Nivel de personalizaci√≥n]

### Styling Solution
**Decisi√≥n:** [Soluci√≥n de estilos]
- **CSS-in-JS:** [styled-components, emotion, etc.]
- **Utility-first:** [tailwindcss, etc.]
- **Preprocessors:** [sass, less, etc.]

---

## üîß Development Tools

### Code Quality
**Decisi√≥n:** [Herramientas de calidad]
```json
{{
  "devDependencies": {{
    "eslint": "[version]",
    "prettier": "[version]",
    "husky": "[version]",
    "lint-staged": "[version]"
  }}
}}
```

### Testing Framework
**Decisi√≥n:** [Stack de testing]
- **Unit Tests:** [jest, vitest, etc.]
- **Component Tests:** [@testing-library, etc.]
- **E2E Tests:** [cypress, playwright, etc.]

---

## üìä Bundle Analysis

### Size Optimization
**Decisi√≥n:** [Estrategia de optimizaci√≥n]
- **Bundle analyzer:** [webpack-bundle-analyzer, etc.]
- **Tree shaking:** [Configuraci√≥n]
- **Code splitting:** [Estrategia]

### Performance Budget
**Decisi√≥n:** [L√≠mites definidos]
```javascript
// Bundle size limits
const BUNDLE_LIMITS = {{
  maxAssetSize: 250000, // 250kb
  maxEntrypointSize: 250000,
  hints: "warning"
}}
```

---

## üîí Security y Updates

### Dependency Security
**Decisi√≥n:** [Estrategia de seguridad]
- **Audit frequency:** [Frecuencia de auditor√≠a]
- **Automated updates:** [Dependabot, renovate, etc.]
- **Vulnerability monitoring:** [Herramientas]

### Version Management
**Decisi√≥n:** [Estrategia de versionado]
- **Semver policy:** [C√≥mo se manejan updates]
- **Lock files:** [Pol√≠tica de commit]
- **Major updates:** [Proceso de actualizaci√≥n]

---

## üè∑Ô∏è Categorizaci√≥n de Dependencies

### Production Dependencies
```json
{{
  "dependencies": {{
    "// Framework": "",
    "[framework]": "^X.X.X",
    
    "// State Management": "",
    "[state-lib]": "^X.X.X",
    
    "// Routing": "",
    "[router]": "^X.X.X",
    
    "// HTTP Client": "",
    "[http-client]": "^X.X.X",
    
    "// UI Library": "",
    "[ui-lib]": "^X.X.X"
  }}
}}
```

### Development Dependencies
```json
{{
  "devDependencies": {{
    "// Build Tools": "",
    "[bundler]": "^X.X.X",
    
    "// Code Quality": "",
    "eslint": "^X.X.X",
    "prettier": "^X.X.X",
    
    "// Testing": "",
    "[test-framework]": "^X.X.X",
    
    "// Types": "",
    "@types/[library]": "^X.X.X"
  }}
}}
```

---

## üìã Dependency Checklist

### Evaluaci√≥n de Nuevas Dependencies
- [ ] **Size impact:** ¬øC√≥mo afecta al bundle size?
- [ ] **Maintenance:** ¬øEst√° activamente mantenida?
- [ ] **Community:** ¬øTiene buena adopci√≥n y documentaci√≥n?
- [ ] **Alternatives:** ¬øSe evaluaron alternativas?
- [ ] **Security:** ¬øTiene vulnerabilidades conocidas?
- [ ] **TypeScript:** ¬øTiene soporte TypeScript si es necesario?

### Mantenimiento Regular
- [ ] **Audit mensual:** Revisar vulnerabilities
- [ ] **Update dependencies:** Mantener actualizadas
- [ ] **Bundle analysis:** Monitorear tama√±o
- [ ] **Performance impact:** Medir impacto
- [ ] **Remove unused:** Limpiar dependencies no usadas

---

## üîÑ Scripts de Package.json

**Decisi√≥n:** [Scripts definidos]
```json
{{
  "scripts": {{
    "dev": "[comando desarrollo]",
    "build": "[comando build]",
    "preview": "[comando preview]",
    "test": "[comando testing]",
    "test:watch": "[comando test watch]",
    "lint": "[comando lint]",
    "lint:fix": "[comando lint fix]",
    "type-check": "[comando type check]",
    "analyze": "[comando bundle analysis]",
    "audit": "[comando security audit]"
  }}
}}
```

---

## üîÑ Pr√≥ximos Pasos

### Setup Inicial
- [ ] [Configurar package manager]
- [ ] [Instalar dependencies core]
- [ ] [Configurar herramientas de desarrollo]

### Configuraci√≥n
- [ ] [Setup linting y formatting]
- [ ] [Configurar testing framework]
- [ ] [Setup bundle analysis]

### Mantenimiento
- [ ] [Establecer proceso de updates]
- [ ] [Configurar security scanning]
- [ ] [Documentar dependency decisions]

---

*Marco generado por The Mighty Task System*  
*Consultar playbook original: `playbooks/documentation_playbooks/{filename}`*
'''
