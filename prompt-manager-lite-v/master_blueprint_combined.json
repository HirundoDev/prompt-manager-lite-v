{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Master Blueprint for Software Projects V3 (Modular)",
  "description": "The master orchestrator for a project's DNA. This schema acts as a high-level assembler, composing 18 independent, resilient sub-schemas into a single, authoritative blueprint. It defines the entire project lifecycle, from strategic goals and business logic to a high-fidelity 'Visual Blueprint' that specifies the UI with engineering precision. This modular architecture ensures maintainability and allows specialized agents to focus on discrete parts of the project while maintaining overall coherence.",
  "type": "object",
  "properties": {
    "projectInfo": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project Info",
      "description": "High-level metadata about the project.",
      "type": "object",
      "properties": {
        "projectName": {
          "type": "string",
          "description": "The official name of the project."
        },
        "projectDescription": {
          "type": "string",
          "description": "A concise summary of the project's purpose and goals."
        },
        "version": {
          "type": "string",
          "description": "The current version of the blueprint document.",
          "default": "3.0.0"
        }
      },
      "required": [
        "projectName",
        "projectDescription"
      ]
    },
    "projectManagement": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project Management",
      "description": "(Generated by Architect/Auditor) The methodology, rituals, and tools used to manage the software development lifecycle.",
      "type": "object",
      "properties": {
        "methodology": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "enum": [
                "Scrum",
                "Kanban",
                "ScrumBan",
                "Lean",
                "Waterfall",
                "Custom"
              ],
              "description": "The primary development methodology employed."
            },
            "justification": {
              "type": "string",
              "description": "Rationale for choosing this methodology for this specific project."
            }
          },
          "required": [
            "name",
            "justification"
          ]
        },
        "ticketingSystem": {
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "description": "e.g., Jira, Trello, Asana, GitHub Issues"
            },
            "boardUrl": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "sourceControl": {
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "description": "e.g., GitHub, GitLab, Bitbucket"
            },
            "repoUrl": {
              "type": "string",
              "format": "uri"
            },
            "branchingStrategy": {
              "type": "string",
              "description": "e.g., GitFlow, GitHub Flow, Trunk-Based Development"
            }
          }
        }
      }
    },
    "architecture": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Software Architecture",
      "description": "(Generated by Software Architect) The high-level architectural plan for the system.",
      "type": "object",
      "properties": {
        "architecturalPattern": {
          "type": "string",
          "enum": [
            "Monolithic",
            "Microservices",
            "Serverless",
            "Layered",
            "Event-Driven",
            "Other"
          ],
          "description": "The primary architectural pattern chosen."
        },
        "technologyStack": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "layer": {
                "type": "string",
                "enum": [
                  "Frontend",
                  "Backend",
                  "Database",
                  "Cache",
                  "MessageQueue"
                ]
              },
              "technology": {
                "type": "string"
              },
              "version": {
                "type": "string"
              }
            }
          }
        },
        "communicationStyle": {
          "type": "string",
          "enum": [
            "REST",
            "GraphQL",
            "gRPC",
            "WebSocket",
            "Message-Based"
          ],
          "description": "How different components or services communicate."
        },
        "dataFlowDiagram": {
          "type": "string",
          "description": "A high-level description or link to a diagram showing data flow."
        }
      },
      "required": [
        "architecturalPattern",
        "technologyStack"
      ]
    },
    "dataModel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Data Model",
      "description": "(Generated by Data Modeler) A visual or conceptual representation of the data model, often as an ERD.",
      "type": "object",
      "properties": {
        "diagram": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ERD",
                "UML Class Diagram",
                "Conceptual Model"
              ],
              "description": "The type of diagram used to represent the data model."
            },
            "format": {
              "type": "string",
              "enum": [
                "Mermaid",
                "PlantUML",
                "Image URL",
                "ASCII"
              ],
              "description": "The format in which the diagram is stored or generated."
            },
            "source": {
              "type": "string",
              "description": "The raw source code for the diagram (e.g., Mermaid script) or a URL to an image."
            }
          },
          "required": [
            "type",
            "format",
            "source"
          ]
        }
      }
    },
    "businessLogic": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Business Logic",
      "description": "(Generated by Business Logic Analyst) A definitive guide to the core business rules and logic that govern the application's behavior.",
      "type": "object",
      "properties": {
        "businessRules": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "ruleId": {
                "type": "string"
              },
              "description": {
                "type": "string",
                "description": "A clear, plain-language description of the rule."
              },
              "trigger": {
                "type": "string",
                "description": "The event or condition that triggers this rule."
              },
              "outcome": {
                "type": "string",
                "description": "The expected result or action when the rule is applied."
              }
            },
            "required": [
              "ruleId",
              "description"
            ]
          }
        }
      }
    },
    "operationalStrategy": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Operational Strategy",
      "description": "(Generated by DevOps Specialist) Plan for deploying, monitoring, and maintaining the application.",
      "type": "object",
      "properties": {
        "monitoring": {
          "type": "object",
          "properties": {
            "loggingProvider": {
              "type": "string",
              "description": "Logging service (e.g., Datadog, Sentry, ELK Stack)."
            },
            "metricsProvider": {
              "type": "string",
              "description": "Metrics and monitoring service (e.g., Prometheus, Grafana, New Relic)."
            },
            "alertingChannels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Channels for sending alerts (e.g., PagerDuty, Slack, Email)."
            }
          }
        },
        "backupAndRecovery": {
          "type": "object",
          "properties": {
            "databaseBackupPolicy": {
              "type": "string",
              "description": "e.g., 'Daily snapshots, retained for 30 days'"
            },
            "disasterRecoveryPlan": {
              "type": "string",
              "description": "A high-level summary of the DR plan."
            }
          }
        }
      }
    },
    "forensicAudit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Forensic Audit",
      "description": "(Generated by Logic Auditor) A detailed audit of the codebase, identifying code smells, technical debt, and security vulnerabilities.",
      "type": "object",
      "properties": {
        "summary": {
          "type": "string",
          "description": "A high-level overview of the audit findings."
        },
        "codeSmells": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "file": {
                "type": "string"
              },
              "line": {
                "type": "integer"
              },
              "description": {
                "type": "string"
              },
              "severity": {
                "type": "string",
                "enum": [
                  "Critical",
                  "Major",
                  "Minor",
                  "Info"
                ]
              }
            }
          }
        },
        "technicalDebt": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "area": {
                "type": "string",
                "description": "e.g., Testing, Documentation, Refactoring"
              },
              "description": {
                "type": "string"
              },
              "effortToFix": {
                "type": "string",
                "description": "e.g., 'Low', 'Medium', 'High'"
              }
            }
          }
        }
      }
    },
    "componentLibrary": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Component Library",
      "description": "(Generated by UI/UX Designer) A comprehensive inventory of all UI components used in the application.",
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Design",
                  "Development",
                  "Ready",
                  "Deprecated"
                ]
              },
              "description": {
                "type": "string"
              },
              "propsSchema": {
                "type": "object",
                "description": "A JSON schema describing the component's properties."
              },
              "emittedEvents": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "qualityGoals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Quality Goals",
      "description": "(Generated by Architect/Auditor) Non-functional requirements that define the quality attributes of the system.",
      "type": "object",
      "properties": {
        "performance": {
          "type": "object",
          "properties": {
            "metric": {
              "type": "string",
              "description": "e.g., 'API Response Time', 'Page Load Time'"
            },
            "target": {
              "type": "string",
              "description": "e.g., '< 200ms', '< 2s'"
            }
          }
        },
        "reliability": {
          "type": "object",
          "properties": {
            "metric": {
              "type": "string",
              "description": "e.g., 'Uptime', 'Error Rate'"
            },
            "target": {
              "type": "string",
              "description": "e.g., '99.99%', '< 0.1%'"
            }
          }
        },
        "security": {
          "type": "object",
          "properties": {
            "requirement": {
              "type": "string",
              "description": "e.g., 'OWASP Top 10 Compliant', 'Data Encryption at Rest'"
            }
          }
        },
        "maintainability": {
          "type": "object",
          "properties": {
            "metric": {
              "type": "string",
              "description": "e.g., 'Code Coverage', 'Cyclomatic Complexity'"
            },
            "target": {
              "type": "string",
              "description": "e.g., '> 85%', '< 10'"
            }
          }
        }
      }
    },
    "testingStrategy": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Testing Strategy",
      "description": "(Generated by QA Engineer) The comprehensive strategy for ensuring software quality, including all levels of testing.",
      "type": "object",
      "properties": {
        "testingLevels": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "level": {
                "type": "string",
                "enum": [
                  "Unit",
                  "Integration",
                  "End-to-End",
                  "Performance",
                  "Security"
                ]
              },
              "framework": {
                "type": "string",
                "description": "The primary framework or tool used for this level of testing."
              },
              "coverageTarget": {
                "type": "string",
                "description": "The target code coverage percentage for this level."
              }
            }
          }
        },
        "testEnvironments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "e.g., 'Local', 'CI', 'Staging'"
              },
              "description": {
                "type": "string",
                "description": "The purpose and configuration of this test environment."
              }
            }
          }
        }
      }
    },
    "deploymentStrategy": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Deployment Strategy",
      "description": "(Generated by DevOps Specialist) The comprehensive plan for deploying the application to various environments.",
      "type": "object",
      "properties": {
        "environments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "Development",
                  "Staging",
                  "Production"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "deploymentMethod": {
                "type": "string",
                "description": "e.g., 'CI/CD Pipeline', 'Manual'"
              },
              "ciCdPipeline": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string",
                    "description": "e.g., GitHub Actions, Jenkins, GitLab CI"
                  },
                  "pipelineFile": {
                    "type": "string",
                    "description": "Path to the pipeline configuration file."
                  }
                }
              }
            }
          }
        },
        "releaseStrategy": {
          "type": "string",
          "enum": [
            "Blue-Green",
            "Canary",
            "Rolling Update",
            "Recreate"
          ],
          "description": "The strategy used for releasing new versions of the application."
        }
      }
    },
    "documentationManifest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Documentation Manifest",
      "description": "(Generated by Documentation Architect) A master manifest of all documentation artifacts generated for the project.",
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "ownerAgent": {
                "type": "string"
              }
            },
            "required": [
              "title",
              "path",
              "ownerAgent"
            ]
          }
        }
      }
    },
    "featureManifest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Feature Manifest",
      "description": "(Generated by Business Logic Analyst) A catalog of all user-facing features and their current status.",
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "featureId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Planned",
                  "In Development",
                  "Completed",
                  "Deprecated"
                ]
              },
              "userStories": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "featureId",
              "description",
              "status"
            ]
          }
        }
      }
    },
    "dataModelDictionary": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Data Model Dictionary",
      "description": "(Generated by Data Modeler) A detailed dictionary of all data models, attributes, and relationships.",
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "modelName": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "attributes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "dataType": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "isPrimaryKey": {
                      "type": "boolean"
                    },
                    "isForeignKey": {
                      "type": "boolean"
                    },
                    "isNullable": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "relationships": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "relatedModel": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "One-to-One",
                        "One-to-Many",
                        "Many-to-Many"
                      ]
                    },
                    "foreignKey": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "apiContract": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "API Contract",
      "description": "(Generated by Backend Architect) The definitive specification for the application's API, detailing all endpoints, request/response formats, and authentication methods.",
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ]
              },
              "description": {
                "type": "string"
              },
              "requestBodySchema": {
                "type": "object"
              },
              "responseBodySchema": {
                "type": "object"
              }
            }
          }
        },
        "authentication": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "OAuth 2.0",
                "JWT",
                "API Key",
                "None"
              ]
            },
            "details": {
              "type": "string"
            }
          }
        }
      }
    },
    "stateManagementPlan": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "State Management Plan",
      "description": "(Generated by Frontend Architect) The strategy and implementation details for managing application state.",
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string",
          "enum": [
            "Global Store",
            "Component State",
            "Hybrid"
          ],
          "description": "The overall approach to state management."
        },
        "library": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "e.g., Redux, MobX, Vuex, Pinia, Zustand, Context API"
            },
            "version": {
              "type": "string"
            }
          }
        },
        "stores": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the state store or slice."
              },
              "description": {
                "type": "string",
                "description": "A brief description of the data managed by this store."
              }
            }
          }
        }
      }
    },
    "designSystem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Design System",
      "description": "(Generated by UI/UX Designer) The foundational rules and guidelines for the application's visual design.",
      "type": "object",
      "properties": {
        "colorPalette": {
          "type": "object",
          "properties": {
            "primary": {
              "type": "string"
            },
            "secondary": {
              "type": "string"
            },
            "accent": {
              "type": "string"
            },
            "neutral": {
              "type": "string"
            }
          }
        },
        "typography": {
          "type": "object",
          "properties": {
            "fontFamily": {
              "type": "string"
            },
            "baseSize": {
              "type": "string"
            },
            "scaleRatio": {
              "type": "number"
            }
          }
        },
        "spacingSystem": {
          "type": "object",
          "properties": {
            "baseUnit": {
              "type": "string"
            },
            "scale": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "fileExecutionMap": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "File Execution Map",
      "description": "(Generated by Software Architect) A comprehensive inventory of all files in the project, detailing their purpose, language, and execution context.",
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "purpose": {
                "type": "string"
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "isEntryPoint": {
                "type": "boolean"
              }
            },
            "required": [
              "path",
              "language",
              "purpose"
            ]
          }
        }
      }
    },
    "deepLogicAnalysis": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Deep Logic Analysis",
      "description": "(Generated by Logic Auditor) An in-depth analysis of complex business logic, algorithms, and potential edge cases.",
      "type": "object",
      "properties": {
        "analyzedComponents": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "componentName": {
                "type": "string",
                "description": "The name of the component or module analyzed."
              },
              "filePath": {
                "type": "string",
                "description": "The primary file path for the component."
              },
              "findings": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "findingId": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "description": "Detailed description of the logical finding."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "Logical Flaw",
                        "Edge Case",
                        "Complexity Hotspot",
                        "Inconsistency"
                      ]
                    },
                    "recommendation": {
                      "type": "string",
                      "description": "Suggested action or refactoring."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "wireframeStates": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Wireframe States",
      "description": "(Generated by UI/UX Designer) A visual representation of the application's frontend states using a component tree, similar to a DOM structure.",
      "type": "object",
      "properties": {
        "states": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "viewName": {
                "type": "string",
                "description": "A unique name for this view or screen state (e.g., 'LoginPage-Default', 'Dashboard-EmptyState')."
              },
              "componentTree": {
                "$ref": "#/definitions/wireframeNode"
              }
            },
            "required": [
              "viewName",
              "componentTree"
            ]
          }
        }
      },
      "definitions": {
        "wireframeNode": {
          "type": "object",
          "properties": {
            "componentType": {
              "type": "string",
              "description": "The type of UI element (e.g., 'div', 'button', 'span', 'h1', 'p', 'img', 'input')."
            },
            "id": {
              "type": "string",
              "description": "A unique identifier for this node within the view."
            },
            "textContent": {
              "type": "string",
              "description": "The text content of the element, if any."
            },
            "styles": {
              "type": "object",
              "description": "Basic visual styling for layout purposes.",
              "properties": {
                "width": {
                  "type": "string"
                },
                "height": {
                  "type": "string"
                },
                "padding": {
                  "type": "string"
                },
                "margin": {
                  "type": "string"
                },
                "backgroundColor": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "border": {
                  "type": "string"
                },
                "display": {
                  "type": "string"
                },
                "flexDirection": {
                  "type": "string"
                }
              }
            },
            "children": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/wireframeNode"
              }
            }
          },
          "required": [
            "componentType"
          ]
        }
      }
    },
    "visualBlueprint": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Visual Blueprint",
      "description": "(Generated by UI/UX Designer) A collection of wireframes or mockups that define the application's user interface.",
      "type": "object",
      "properties": {
        "screens": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "screenName": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "image_url": {
                "type": "string",
                "format": "uri"
              },
              "link_to_prototype": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "featureLifecycle": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Feature Lifecycle Management",
      "description": "Tracks the lifecycle of all product features from proposal to completion.",
      "type": "array",
      "items": {
        "type": "object",
        "description": "A reference to a feature artifact. It acts as a pointer in the manifest to the actual feature file.",
        "properties": {
          "featureId": {
            "type": "string",
            "description": "Unique identifier for the feature (e.g., 'FEAT-001')."
          },
          "status": {
            "type": "string",
            "description": "The current high-level status of the feature.",
            "enum": [
              "Proposed",
              "In Progress",
              "Completed",
              "On Hold"
            ]
          },
          "summary": {
            "type": "string",
            "description": "A brief, one-line summary of the feature's purpose."
          },
          "path": {
            "type": "string",
            "description": "The relative file path to the feature's detailed markdown document from the `core-system` root."
          }
        },
        "required": [
          "featureId",
          "status",
          "path",
          "summary"
        ]
      }
    },
    "bugLifecycle": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bug Lifecycle Management",
      "description": "Tracks the lifecycle of all reported bugs from discovery to resolution.",
      "type": "array",
      "items": {
        "type": "object",
        "description": "A reference to a bug artifact. It acts as a pointer in the manifest to the actual bug report file.",
        "properties": {
          "bugId": {
            "type": "string",
            "description": "Unique identifier for the bug (e.g., 'BUG-001')."
          },
          "status": {
            "type": "string",
            "description": "The current high-level status of the bug.",
            "enum": [
              "Reported",
              "In Progress",
              "Resolved",
              "Closed"
            ]
          },
          "summary": {
            "type": "string",
            "description": "A brief, one-line summary of the bug's nature."
          },
          "path": {
            "type": "string",
            "description": "The relative file path to the bug's detailed markdown report from the `core-system` root."
          }
        },
        "required": [
          "bugId",
          "status",
          "path",
          "summary"
        ]
      }
    }
  },
  "definitions": {
    "$ref": "master_blueprint_parts/definitions.json#/definitions"
  },
  "generated_at": "2025-08-04T16:21:54.919850",
  "total_parts": 23
}