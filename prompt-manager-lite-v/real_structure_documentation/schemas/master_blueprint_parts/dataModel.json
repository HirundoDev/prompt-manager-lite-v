{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$comment": "Playbook: prompt_playbooks/schemas_playbooks/playbook_schema-dataModel.md",
    "title": "Data Model",
    "description": "(Generated by Data Modeler) A visual or conceptual representation of the data model, often as an ERD.",
    "type": "object",
    "properties": {
        "diagram": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": ["ERD", "UML Class Diagram", "Conceptual Model"],
                    "description": "The type of diagram used to represent the data model."
                },
                "format": {
                    "type": "string",
                    "enum": ["Mermaid", "PlantUML", "Image URL", "ASCII"],
                    "description": "The format in which the diagram is stored or generated."
                },
                "source": {
                    "type": "string",
                    "description": "The raw source code for the diagram (e.g., Mermaid script) or a URL to an image."
                }
            },
            "required": ["type", "format", "source"]
        },
        "dictionaryRef": {
            "type": "string",
            "description": "Optional reference to a data dictionary file (e.g., schemas/master_blueprint_parts/dataModelDictionary.json)."
        },
        "namingConventions": {
            "type": "object",
            "description": "Optional naming conventions for entities/attributes.",
            "properties": {
                "entityCase": { "type": "string", "enum": ["PascalCase", "CamelCase", "snake_case", "kebab-case"] },
                "attributeCase": { "type": "string", "enum": ["camelCase", "snake_case"] },
                "tablePrefix": { "type": "string" }
            }
        },
        "entities": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "name": { "type": "string" },
                    "description": { "type": "string" },
                    "attributes": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": { "type": "string" },
                                "type": { "type": "string", "description": "Logical type (string, number, boolean, date, uuid, json, etc.)." },
                                "format": { "type": "string", "description": "Optional format (email, uri, date-time, etc.)." },
                                "nullable": { "type": "boolean" },
                                "unique": { "type": "boolean" },
                                "default": {},
                                "length": { "type": "integer" },
                                "enum": { "type": "array", "items": { "type": "string" } },
                                "references": { "type": "object", "description": "Optional FK reference.", "properties": { "entity": { "type": "string" }, "attribute": { "type": "string" } } }
                            },
                            "required": ["name", "type"]
                        }
                    },
                    "primaryKey": { "type": "array", "items": { "type": "string" }, "description": "Attribute names composing the primary key." },
                    "indexes": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": { "type": "string" },
                                "unique": { "type": "boolean" },
                                "fields": { "type": "array", "items": { "type": "object", "properties": { "attribute": { "type": "string" }, "order": { "type": "string", "enum": ["asc", "desc"] } }, "required": ["attribute"] } },
                                "where": { "type": "string", "description": "Partial index predicate (if supported)." }
                            }
                        }
                    },
                    "constraints": {
                        "type": "array",
                        "items": { "type": "object", "properties": { "name": { "type": "string" }, "type": { "type": "string", "enum": ["unique", "check", "fk"] }, "expression": { "type": "string" }, "message": { "type": "string" } } }
                    },
                    "timestamps": { "type": "object", "properties": { "createdAt": { "type": "string" }, "updatedAt": { "type": "string" } } },
                    "softDelete": { "type": "object", "properties": { "enabled": { "type": "boolean" }, "field": { "type": "string" }, "strategy": { "type": "string", "enum": ["boolean-flag", "deleted-at"] } } }
                },
                "required": ["name"]
            }
        },
        "relationships": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "fromEntity": { "type": "string" },
                    "toEntity": { "type": "string" },
                    "type": { "type": "string", "enum": ["one-to-one", "one-to-many", "many-to-one", "many-to-many"] },
                    "fromAttribute": { "type": "string", "description": "Source attribute participating in the relationship." },
                    "toAttribute": { "type": "string", "description": "Target attribute participating in the relationship." },
                    "joinEntity": { "type": "string", "description": "For many-to-many relationships." },
                    "onDelete": { "type": "string", "enum": ["restrict", "cascade", "set-null", "no-action"] },
                    "onUpdate": { "type": "string", "enum": ["restrict", "cascade", "set-null", "no-action"] },
                    "description": { "type": "string" }
                },
                "required": ["fromEntity", "toEntity", "type"]
            }
        },
        "versioning": {
            "type": "object",
            "properties": {
                "schemaVersion": { "type": "string" },
                "strategy": { "type": "string", "enum": ["none", "app", "db", "event-sourced"] },
                "migrationStrategy": { "type": "string", "enum": ["manual", "auto", "tooling"] },
                "notes": { "type": "string" }
            }
        },
        "multitenancy": {
            "type": "object",
            "properties": {
                "strategy": { "type": "string", "enum": ["none", "separate-db", "separate-schema", "row-level"] },
                "tenantKey": { "type": "string" },
                "isolation": { "type": "string", "description": "Isolation policy or guarantees." }
            }
        },
        "i18n": {
            "type": "object",
            "properties": {
                "enabled": { "type": "boolean" },
                "defaultLocale": { "type": "string" },
                "locales": { "type": "array", "items": { "type": "string" } },
                "strategy": { "type": "string", "enum": ["table-per-locale", "jsonb", "columns"] },
                "localizedEntities": { "type": "array", "items": { "type": "string" } }
            }
        },
        "events": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "name": { "type": "string" },
                    "sourceEntity": { "type": "string" },
                    "triggers": { "type": "array", "items": { "type": "string", "enum": ["create", "update", "delete"] } },
                    "payloadSchema": { "type": "object" },
                    "consumers": { "type": "array", "items": { "type": "string" } }
                },
                "required": ["name", "sourceEntity"]
            }
        },
        "projections": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "name": { "type": "string" },
                    "source": { "type": "array", "items": { "type": "string" } },
                    "materialized": { "type": "boolean" },
                    "targetModelName": { "type": "string" },
                    "schedule": { "type": "string", "description": "If batch, a cron-like expression." },
                    "schema": { "type": "object" }
                },
                "required": ["name", "source"]
            }
        }
    }
}