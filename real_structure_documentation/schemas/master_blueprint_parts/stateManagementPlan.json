{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$comment": "Playbook: prompt_playbooks/schemas_playbooks/playbook_schema-stateManagementPlan.md",
    "title": "State Management Plan Template Schema",
    "description": "Universal template for documenting state management strategies across any frontend framework or technology stack. Provides structured placeholders for architecture patterns, state classification, library selection, and performance optimization strategies.",
    "type": "object",
    "required": [
        "metadata",
        "architecture",
        "stateTypes",
        "libraries",
        "performance",
        "testing",
        "documentation"
    ],
    "properties": {
        "metadata": {
            "type": "object",
            "description": "State management plan identification and context information",
            "required": [
                "planName",
                "version",
                "targetFramework",
                "lastUpdated",
                "projectContext"
            ],
            "properties": {
                "planName": {
                    "type": "string",
                    "description": "Descriptive name for this state management plan",
                    "default": "[STATE_MANAGEMENT_PLAN_NAME]",
                    "examples": [
                        "[PROJECT_NAME] State Management Strategy",
                        "[APPLICATION_TYPE] State Architecture Plan"
                    ]
                },
                "version": {
                    "type": "string",
                    "pattern": "^\\d+\\.\\d+\\.\\d+$",
                    "description": "Semantic version of this state management plan",
                    "default": "[PLAN_VERSION]"
                },
                "targetFramework": {
                    "type": "string",
                    "description": "Primary frontend framework or technology stack",
                    "default": "[FRONTEND_FRAMEWORK]",
                    "examples": [
                        "[REACT_FRAMEWORK]",
                        "[VUE_FRAMEWORK]",
                        "[ANGULAR_FRAMEWORK]",
                        "[SVELTE_FRAMEWORK]",
                        "[VANILLA_JS]",
                        "[OTHER_FRAMEWORK]"
                    ]
                },
                "lastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp of last plan update",
                    "default": "[LAST_UPDATE_TIMESTAMP]"
                },
                "projectContext": {
                    "type": "object",
                    "description": "Project context and scope information",
                    "required": [
                        "projectType",
                        "applicationScale",
                        "teamSize"
                    ],
                    "properties": {
                        "projectType": {
                            "type": "string",
                            "description": "Type of application or project",
                            "default": "[PROJECT_TYPE]",
                            "examples": [
                                "[WEB_APPLICATION]",
                                "[MOBILE_APP]",
                                "[DESKTOP_APP]",
                                "[HYBRID_APP]",
                                "[COMPONENT_LIBRARY]"
                            ]
                        },
                        "applicationScale": {
                            "type": "string",
                            "description": "Scale and complexity level of the application",
                            "default": "[APPLICATION_SCALE]",
                            "examples": [
                                "[SMALL_SCALE]",
                                "[MEDIUM_SCALE]",
                                "[LARGE_SCALE]",
                                "[ENTERPRISE_SCALE]"
                            ]
                        },
                        "teamSize": {
                            "type": "string",
                            "description": "Development team size and structure",
                            "default": "[TEAM_SIZE]",
                            "examples": [
                                "[SOLO_DEVELOPER]",
                                "[SMALL_TEAM]",
                                "[MEDIUM_TEAM]",
                                "[LARGE_TEAM]"
                            ]
                        },
                        "description": {
                            "type": "string",
                            "description": "Detailed description of state management requirements and goals",
                            "default": "[PROJECT_DESCRIPTION]"
                        }
                    }
                },
                "maintainers": {
                    "type": "array",
                    "description": "Team members responsible for state management architecture",
                    "items": {
                        "type": "object",
                        "required": [
                            "name",
                            "role"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Maintainer name",
                                "default": "[MAINTAINER_NAME]"
                            },
                            "role": {
                                "type": "string",
                                "description": "Role in state management architecture",
                                "default": "[MAINTAINER_ROLE]",
                                "examples": [
                                    "[FRONTEND_ARCHITECT]",
                                    "[SENIOR_DEVELOPER]",
                                    "[TECH_LEAD]",
                                    "[STATE_MANAGER]",
                                    "[TEAM_LEAD]"
                                ]
                            },
                            "email": {
                                "type": "string",
                                "format": "email",
                                "description": "Contact email",
                                "default": "[MAINTAINER_EMAIL]"
                            },
                            "responsibilities": {
                                "type": "array",
                                "description": "Specific responsibilities in state management",
                                "items": {
                                    "type": "string",
                                    "default": "[RESPONSIBILITY]"
                                }
                            }
                        }
                    }
                }
            }
        },
        "architecture": {
            "type": "object",
            "description": "Overall state management architecture strategy and design decisions",
            "required": [
                "architecturalStrategy",
                "designPatterns",
                "dataFlowModel",
                "scalabilityApproach"
            ],
            "properties": {
                "architecturalStrategy": {
                    "type": "object",
                    "description": "Primary architectural approach for state management",
                    "required": [
                        "strategyType",
                        "rationale"
                    ],
                    "properties": {
                        "strategyType": {
                            "type": "string",
                            "description": "Type of state management architecture strategy",
                            "default": "[ARCHITECTURE_STRATEGY]",
                            "examples": [
                                "[CENTRALIZED_STRATEGY]",
                                "[DISTRIBUTED_STRATEGY]",
                                "[HYBRID_STRATEGY]",
                                "[ATOMIC_STRATEGY]",
                                "[LAYERED_STRATEGY]",
                                "[MODULAR_STRATEGY]"
                            ]
                        },
                        "rationale": {
                            "type": "string",
                            "description": "Reasoning behind the chosen architectural strategy",
                            "default": "[STRATEGY_RATIONALE]"
                        },
                        "tradeoffs": {
                            "type": "object",
                            "description": "Trade-offs considered in strategy selection",
                            "properties": {
                                "advantages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "default": "[STRATEGY_ADVANTAGE]"
                                    }
                                },
                                "disadvantages": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "default": "[STRATEGY_DISADVANTAGE]"
                                    }
                                }
                            }
                        }
                    }
                },
                "designPatterns": {
                    "type": "array",
                    "description": "State management design patterns and methodologies applied",
                    "items": {
                        "type": "object",
                        "required": [
                            "patternName",
                            "applicationContext"
                        ],
                        "properties": {
                            "patternName": {
                                "type": "string",
                                "description": "Name of the design pattern",
                                "default": "[DESIGN_PATTERN]",
                                "examples": [
                                    "[FLUX_PATTERN]",
                                    "[OBSERVER_PATTERN]",
                                    "[COMMAND_PATTERN]",
                                    "[MEDIATOR_PATTERN]",
                                    "[REACTIVE_PATTERN]",
                                    "[EVENT_SOURCING_PATTERN]",
                                    "[CQRS_PATTERN]",
                                    "[ATOMIC_PATTERN]"
                                ]
                            },
                            "applicationContext": {
                                "type": "string",
                                "description": "Where and how this pattern is applied",
                                "default": "[PATTERN_APPLICATION_CONTEXT]"
                            },
                            "implementation": {
                                "type": "string",
                                "description": "Implementation approach for this pattern",
                                "default": "[PATTERN_IMPLEMENTATION]"
                            }
                        }
                    }
                },
                "dataFlowModel": {
                    "type": "object",
                    "description": "Data flow architecture and communication patterns",
                    "required": [
                        "flowType",
                        "communicationModel"
                    ],
                    "properties": {
                        "flowType": {
                            "type": "string",
                            "description": "Primary data flow pattern",
                            "default": "[DATA_FLOW_TYPE]",
                            "examples": [
                                "[UNIDIRECTIONAL_FLOW]",
                                "[BIDIRECTIONAL_FLOW]",
                                "[REACTIVE_FLOW]",
                                "[EVENT_DRIVEN_FLOW]",
                                "[PUSH_PULL_FLOW]"
                            ]
                        },
                        "communicationModel": {
                            "type": "string",
                            "description": "How components communicate state changes",
                            "default": "[COMMUNICATION_MODEL]",
                            "examples": [
                                "[DIRECT_COMMUNICATION]",
                                "[EVENT_BUS_COMMUNICATION]",
                                "[OBSERVER_COMMUNICATION]",
                                "[MEDIATOR_COMMUNICATION]",
                                "[PUBLISH_SUBSCRIBE]"
                            ]
                        },
                        "synchronization": {
                            "type": "object",
                            "description": "State synchronization strategies",
                            "properties": {
                                "approach": {
                                    "type": "string",
                                    "description": "Synchronization approach",
                                    "default": "[SYNCHRONIZATION_APPROACH]"
                                },
                                "conflictResolution": {
                                    "type": "string",
                                    "description": "How conflicts are resolved",
                                    "default": "[CONFLICT_RESOLUTION_STRATEGY]"
                                }
                            }
                        }
                    }
                },
                "scalabilityApproach": {
                    "type": "object",
                    "description": "How the architecture scales with application growth",
                    "required": [
                        "scalingStrategy",
                        "modularization"
                    ],
                    "properties": {
                        "scalingStrategy": {
                            "type": "string",
                            "description": "Strategy for scaling state management",
                            "default": "[SCALING_STRATEGY]",
                            "examples": [
                                "[HORIZONTAL_SCALING]",
                                "[VERTICAL_SCALING]",
                                "[MODULAR_SCALING]",
                                "[LAZY_LOADING_SCALING]"
                            ]
                        },
                        "modularization": {
                            "type": "object",
                            "description": "How state is modularized for scalability",
                            "properties": {
                                "approach": {
                                    "type": "string",
                                    "description": "Modularization approach",
                                    "default": "[MODULARIZATION_APPROACH]"
                                },
                                "boundaries": {
                                    "type": "string",
                                    "description": "How module boundaries are defined",
                                    "default": "[MODULE_BOUNDARIES]"
                                }
                            }
                        },
                        "performanceConsiderations": {
                            "type": "array",
                            "description": "Performance considerations for scaling",
                            "items": {
                                "type": "string",
                                "default": "[PERFORMANCE_CONSIDERATION]"
                            }
                        }
                    }
                }
            }
        },
        "stateTypes": {
            "type": "object",
            "description": "Classification and management strategies for different types of application state",
            "required": [
                "stateClassification",
                "managementStrategies"
            ],
            "properties": {
                "stateClassification": {
                    "type": "object",
                    "description": "Categorization of different state types in the application",
                    "required": [
                        "localState",
                        "globalState",
                        "serverState",
                        "sharedState"
                    ],
                    "properties": {
                        "localState": {
                            "type": "object",
                            "description": "Component-level or local scope state management",
                            "required": [
                                "definition",
                                "examples",
                                "managementApproach"
                            ],
                            "properties": {
                                "definition": {
                                    "type": "string",
                                    "description": "Definition of local state in this application context",
                                    "default": "[LOCAL_STATE_DEFINITION]"
                                },
                                "examples": {
                                    "type": "array",
                                    "description": "Examples of local state in the application",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "stateName",
                                            "stateType",
                                            "scope"
                                        ],
                                        "properties": {
                                            "stateName": {
                                                "type": "string",
                                                "description": "Name or identifier of the state",
                                                "default": "[LOCAL_STATE_NAME]"
                                            },
                                            "stateType": {
                                                "type": "string",
                                                "description": "Type or category of local state",
                                                "default": "[LOCAL_STATE_TYPE]",
                                                "examples": [
                                                    "[UI_STATE]",
                                                    "[FORM_DATA]",
                                                    "[TEMPORARY_STATE]",
                                                    "[DERIVED_STATE]",
                                                    "[COMPONENT_STATE]"
                                                ]
                                            },
                                            "scope": {
                                                "type": "string",
                                                "description": "Scope of the local state",
                                                "default": "[STATE_SCOPE]",
                                                "examples": [
                                                    "[COMPONENT_SCOPE]",
                                                    "[PAGE_SCOPE]",
                                                    "[FEATURE_SCOPE]",
                                                    "[MODULE_SCOPE]"
                                                ]
                                            },
                                            "persistence": {
                                                "type": "string",
                                                "description": "Persistence strategy for this state",
                                                "default": "[PERSISTENCE_STRATEGY]",
                                                "examples": [
                                                    "[NO_PERSISTENCE]",
                                                    "[SESSION_PERSISTENCE]",
                                                    "[LOCAL_STORAGE]",
                                                    "[MEMORY_ONLY]",
                                                    "[CUSTOM_PERSISTENCE]"
                                                ]
                                            },
                                            "lifecycle": {
                                                "type": "string",
                                                "description": "Lifecycle management of this state",
                                                "default": "[STATE_LIFECYCLE]"
                                            }
                                        }
                                    }
                                },
                                "managementApproach": {
                                    "type": "object",
                                    "description": "How local state is managed",
                                    "properties": {
                                        "library": {
                                            "type": "string",
                                            "description": "Library or approach used for local state",
                                            "default": "[LOCAL_STATE_LIBRARY]"
                                        },
                                        "patterns": {
                                            "type": "array",
                                            "description": "Patterns used for local state management",
                                            "items": {
                                                "type": "string",
                                                "default": "[LOCAL_STATE_PATTERN]"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "globalState": {
                            "type": "object",
                            "description": "Application-wide or global scope state management",
                            "required": [
                                "definition",
                                "examples",
                                "managementApproach"
                            ],
                            "properties": {
                                "definition": {
                                    "type": "string",
                                    "description": "Definition of global state in this application context",
                                    "default": "[GLOBAL_STATE_DEFINITION]"
                                },
                                "examples": {
                                    "type": "array",
                                    "description": "Examples of global state in the application",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "stateName",
                                            "stateType",
                                            "accessPattern"
                                        ],
                                        "properties": {
                                            "stateName": {
                                                "type": "string",
                                                "description": "Name or identifier of the global state",
                                                "default": "[GLOBAL_STATE_NAME]"
                                            },
                                            "stateType": {
                                                "type": "string",
                                                "description": "Type or category of global state",
                                                "default": "[GLOBAL_STATE_TYPE]",
                                                "examples": [
                                                    "[USER_SESSION]",
                                                    "[APPLICATION_CONFIG]",
                                                    "[UI_THEME]",
                                                    "[NAVIGATION_STATE]",
                                                    "[NOTIFICATIONS]",
                                                    "[AUTHENTICATION]"
                                                ]
                                            },
                                            "accessPattern": {
                                                "type": "string",
                                                "description": "How this global state is accessed",
                                                "default": "[ACCESS_PATTERN]"
                                            },
                                            "persistence": {
                                                "type": "object",
                                                "description": "Persistence configuration for global state",
                                                "properties": {
                                                    "enabled": {
                                                        "type": "boolean",
                                                        "description": "Whether persistence is enabled",
                                                        "default": "[PERSISTENCE_ENABLED]"
                                                    },
                                                    "storage": {
                                                        "type": "string",
                                                        "description": "Storage mechanism used",
                                                        "default": "[STORAGE_MECHANISM]"
                                                    },
                                                    "ttl": {
                                                        "type": "string",
                                                        "description": "Time to live for persisted state",
                                                        "default": "[STATE_TTL]"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "managementApproach": {
                                    "type": "object",
                                    "description": "How global state is managed",
                                    "properties": {
                                        "library": {
                                            "type": "string",
                                            "description": "Library or approach used for global state",
                                            "default": "[GLOBAL_STATE_LIBRARY]"
                                        },
                                        "architecture": {
                                            "type": "string",
                                            "description": "Architectural approach for global state",
                                            "default": "[GLOBAL_STATE_ARCHITECTURE]"
                                        }
                                    }
                                }
                            }
                        },
                        "serverState": {
                            "type": "object",
                            "description": "Server-side data and remote state management",
                            "required": [
                                "definition",
                                "dataFetching",
                                "caching",
                                "synchronization"
                            ],
                            "properties": {
                                "definition": {
                                    "type": "string",
                                    "description": "Definition of server state in this application context",
                                    "default": "[SERVER_STATE_DEFINITION]"
                                },
                                "dataFetching": {
                                    "type": "object",
                                    "description": "Data fetching strategies and patterns",
                                    "properties": {
                                        "strategy": {
                                            "type": "string",
                                            "description": "Primary data fetching strategy",
                                            "default": "[DATA_FETCHING_STRATEGY]"
                                        },
                                        "library": {
                                            "type": "string",
                                            "description": "Library used for data fetching",
                                            "default": "[DATA_FETCHING_LIBRARY]"
                                        },
                                        "patterns": {
                                            "type": "array",
                                            "description": "Data fetching patterns used",
                                            "items": {
                                                "type": "string",
                                                "default": "[FETCHING_PATTERN]"
                                            }
                                        }
                                    }
                                },
                                "caching": {
                                    "type": "object",
                                    "description": "Caching strategies for server state",
                                    "properties": {
                                        "strategy": {
                                            "type": "string",
                                            "description": "Primary caching strategy",
                                            "default": "[CACHING_STRATEGY]"
                                        },
                                        "invalidation": {
                                            "type": "string",
                                            "description": "Cache invalidation approach",
                                            "default": "[CACHE_INVALIDATION_STRATEGY]"
                                        },
                                        "ttl": {
                                            "type": "string",
                                            "description": "Time to live for cached data",
                                            "default": "[CACHE_TTL]"
                                        }
                                    }
                                },
                                "synchronization": {
                                    "type": "object",
                                    "description": "Server state synchronization strategies",
                                    "properties": {
                                        "method": {
                                            "type": "string",
                                            "description": "Synchronization method",
                                            "default": "[SYNC_METHOD]"
                                        },
                                        "conflictResolution": {
                                            "type": "string",
                                            "description": "How conflicts are resolved",
                                            "default": "[CONFLICT_RESOLUTION]"
                                        }
                                    }
                                }
                            }
                        },
                        "sharedState": {
                            "type": "object",
                            "description": "State shared between different parts of the application or between client and server",
                            "required": [
                                "definition",
                                "synchronizationStrategy"
                            ],
                            "properties": {
                                "definition": {
                                    "type": "string",
                                    "description": "Definition of shared state in this application context",
                                    "default": "[SHARED_STATE_DEFINITION]"
                                },
                                "synchronizationStrategy": {
                                    "type": "object",
                                    "description": "How shared state is synchronized",
                                    "properties": {
                                        "method": {
                                            "type": "string",
                                            "description": "Synchronization method",
                                            "default": "[SHARED_SYNC_METHOD]"
                                        },
                                        "conflictResolution": {
                                            "type": "string",
                                            "description": "Conflict resolution strategy",
                                            "default": "[SHARED_CONFLICT_RESOLUTION]"
                                        },
                                        "offlineSupport": {
                                            "type": "boolean",
                                            "description": "Whether offline support is provided",
                                            "default": "[OFFLINE_SUPPORT]"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "managementStrategies": {
                    "type": "object",
                    "description": "Overall strategies for managing different state types",
                    "properties": {
                        "stateNormalization": {
                            "type": "string",
                            "description": "How state is normalized across the application",
                            "default": "[STATE_NORMALIZATION_STRATEGY]"
                        },
                        "stateComposition": {
                            "type": "string",
                            "description": "How different state types are composed together",
                            "default": "[STATE_COMPOSITION_STRATEGY]"
                        },
                        "stateValidation": {
                            "type": "string",
                            "description": "How state is validated",
                            "default": "[STATE_VALIDATION_STRATEGY]"
                        }
                    }
                }
            }
        },
        "libraries": {
            "type": "object",
            "description": "State management libraries, tools, and dependencies",
            "required": [
                "primaryLibraries",
                "utilityLibraries",
                "selectionCriteria"
            ],
            "properties": {
                "primaryLibraries": {
                    "type": "array",
                    "description": "Main state management libraries used in the application",
                    "items": {
                        "type": "object",
                        "required": [
                            "name",
                            "version",
                            "purpose",
                            "justification"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the state management library",
                                "default": "[LIBRARY_NAME]"
                            },
                            "version": {
                                "type": "string",
                                "description": "Version of the library",
                                "default": "[LIBRARY_VERSION]"
                            },
                            "purpose": {
                                "type": "string",
                                "description": "Primary purpose of this library in the application",
                                "default": "[LIBRARY_PURPOSE]",
                                "examples": [
                                    "[GLOBAL_STATE_MANAGEMENT]",
                                    "[SERVER_STATE_MANAGEMENT]",
                                    "[LOCAL_STATE_MANAGEMENT]",
                                    "[FORM_STATE_MANAGEMENT]",
                                    "[CACHE_MANAGEMENT]"
                                ]
                            },
                            "justification": {
                                "type": "string",
                                "description": "Why this library was chosen",
                                "default": "[LIBRARY_JUSTIFICATION]"
                            },
                            "configuration": {
                                "type": "object",
                                "description": "Library-specific configuration details",
                                "properties": {
                                    "configurationApproach": {
                                        "type": "string",
                                        "description": "How the library is configured",
                                        "default": "[CONFIGURATION_APPROACH]"
                                    },
                                    "customizations": {
                                        "type": "array",
                                        "description": "Custom configurations or extensions",
                                        "items": {
                                            "type": "string",
                                            "default": "[CUSTOMIZATION]"
                                        }
                                    }
                                }
                            },
                            "integrations": {
                                "type": "array",
                                "description": "How this library integrates with other tools",
                                "items": {
                                    "type": "string",
                                    "default": "[INTEGRATION]"
                                }
                            }
                        }
                    }
                },
                "utilityLibraries": {
                    "type": "array",
                    "description": "Supporting libraries and utilities for state management",
                    "items": {
                        "type": "object",
                        "required": [
                            "name",
                            "purpose"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the utility library",
                                "default": "[UTILITY_LIBRARY_NAME]"
                            },
                            "version": {
                                "type": "string",
                                "description": "Version of the utility library",
                                "default": "[UTILITY_LIBRARY_VERSION]"
                            },
                            "purpose": {
                                "type": "string",
                                "description": "Purpose of this utility library",
                                "default": "[UTILITY_PURPOSE]",
                                "examples": [
                                    "[IMMUTABILITY_HELPER]",
                                    "[STATE_NORMALIZATION]",
                                    "[VALIDATION_LIBRARY]",
                                    "[SERIALIZATION_HELPER]",
                                    "[DEBUGGING_TOOL]"
                                ]
                            }
                        }
                    }
                },
                "selectionCriteria": {
                    "type": "object",
                    "description": "Criteria used for selecting state management libraries",
                    "properties": {
                        "technicalCriteria": {
                            "type": "array",
                            "description": "Technical criteria for library selection",
                            "items": {
                                "type": "string",
                                "default": "[TECHNICAL_CRITERION]"
                            }
                        },
                        "businessCriteria": {
                            "type": "array",
                            "description": "Business criteria for library selection",
                            "items": {
                                "type": "string",
                                "default": "[BUSINESS_CRITERION]"
                            }
                        },
                        "evaluationProcess": {
                            "type": "string",
                            "description": "Process used to evaluate and select libraries",
                            "default": "[EVALUATION_PROCESS]"
                        }
                    }
                }
            }
        },
        "performance": {
            "type": "object",
            "description": "Performance optimization strategies and monitoring for state management",
            "required": [
                "optimizationStrategies",
                "monitoring",
                "benchmarks"
            ],
            "properties": {
                "optimizationStrategies": {
                    "type": "object",
                    "description": "Strategies used to optimize state management performance",
                    "properties": {
                        "renderOptimization": {
                            "type": "object",
                            "description": "Strategies to optimize rendering performance",
                            "properties": {
                                "memoization": {
                                    "type": "string",
                                    "description": "Memoization strategies used",
                                    "default": "[MEMOIZATION_STRATEGY]"
                                },
                                "selectorOptimization": {
                                    "type": "string",
                                    "description": "How selectors are optimized",
                                    "default": "[SELECTOR_OPTIMIZATION]"
                                },
                                "componentOptimization": {
                                    "type": "string",
                                    "description": "Component-level optimization strategies",
                                    "default": "[COMPONENT_OPTIMIZATION]"
                                }
                            }
                        },
                        "bundleOptimization": {
                            "type": "object",
                            "description": "Bundle size and loading optimization",
                            "properties": {
                                "codeSplitting": {
                                    "type": "string",
                                    "description": "Code splitting strategy for state management",
                                    "default": "[CODE_SPLITTING_STRATEGY]"
                                },
                                "lazyLoading": {
                                    "type": "string",
                                    "description": "Lazy loading approach for state modules",
                                    "default": "[LAZY_LOADING_APPROACH]"
                                },
                                "treeshaking": {
                                    "type": "string",
                                    "description": "Tree shaking optimization for state libraries",
                                    "default": "[TREESHAKING_OPTIMIZATION]"
                                }
                            }
                        },
                        "memoryOptimization": {
                            "type": "object",
                            "description": "Memory usage optimization strategies",
                            "properties": {
                                "stateCleanup": {
                                    "type": "string",
                                    "description": "How unused state is cleaned up",
                                    "default": "[STATE_CLEANUP_STRATEGY]"
                                },
                                "memoryLeakPrevention": {
                                    "type": "string",
                                    "description": "Strategies to prevent memory leaks",
                                    "default": "[MEMORY_LEAK_PREVENTION]"
                                }
                            }
                        }
                    }
                },
                "monitoring": {
                    "type": "object",
                    "description": "Performance monitoring and measurement strategies",
                    "properties": {
                        "metrics": {
                            "type": "array",
                            "description": "Key performance metrics tracked",
                            "items": {
                                "type": "string",
                                "default": "[PERFORMANCE_METRIC]"
                            }
                        },
                        "tools": {
                            "type": "array",
                            "description": "Tools used for performance monitoring",
                            "items": {
                                "type": "string",
                                "default": "[MONITORING_TOOL]"
                            }
                        },
                        "alerting": {
                            "type": "string",
                            "description": "Performance alerting strategy",
                            "default": "[ALERTING_STRATEGY]"
                        }
                    }
                },
                "benchmarks": {
                    "type": "object",
                    "description": "Performance benchmarks and targets",
                    "properties": {
                        "targets": {
                            "type": "object",
                            "description": "Performance targets and thresholds",
                            "properties": {
                                "renderTime": {
                                    "type": "string",
                                    "description": "Target render time",
                                    "default": "[RENDER_TIME_TARGET]"
                                },
                                "stateSize": {
                                    "type": "string",
                                    "description": "Maximum state size target",
                                    "default": "[STATE_SIZE_TARGET]"
                                },
                                "memoryUsage": {
                                    "type": "string",
                                    "description": "Memory usage target",
                                    "default": "[MEMORY_USAGE_TARGET]"
                                }
                            }
                        },
                        "testingApproach": {
                            "type": "string",
                            "description": "How performance is tested",
                            "default": "[PERFORMANCE_TESTING_APPROACH]"
                        }
                    }
                }
            }
        },
        "testing": {
            "type": "object",
            "description": "Testing strategies and approaches for state management",
            "required": [
                "testingStrategy",
                "testTypes",
                "tools"
            ],
            "properties": {
                "testingStrategy": {
                    "type": "object",
                    "description": "Overall testing strategy for state management",
                    "properties": {
                        "approach": {
                            "type": "string",
                            "description": "Primary testing approach",
                            "default": "[TESTING_APPROACH]"
                        },
                        "coverage": {
                            "type": "string",
                            "description": "Testing coverage strategy",
                            "default": "[COVERAGE_STRATEGY]"
                        },
                        "automation": {
                            "type": "string",
                            "description": "Test automation approach",
                            "default": "[AUTOMATION_APPROACH]"
                        }
                    }
                },
                "testTypes": {
                    "type": "array",
                    "description": "Types of tests implemented for state management",
                    "items": {
                        "type": "object",
                        "required": [
                            "testType",
                            "scope",
                            "tools"
                        ],
                        "properties": {
                            "testType": {
                                "type": "string",
                                "description": "Type of test",
                                "default": "[TEST_TYPE]",
                                "examples": [
                                    "[UNIT_TESTS]",
                                    "[INTEGRATION_TESTS]",
                                    "[E2E_TESTS]",
                                    "[PERFORMANCE_TESTS]",
                                    "[SNAPSHOT_TESTS]"
                                ]
                            },
                            "scope": {
                                "type": "string",
                                "description": "What this test type covers",
                                "default": "[TEST_SCOPE]"
                            },
                            "tools": {
                                "type": "array",
                                "description": "Tools used for this test type",
                                "items": {
                                    "type": "string",
                                    "default": "[TEST_TOOL]"
                                }
                            }
                        }
                    }
                },
                "tools": {
                    "type": "object",
                    "description": "Testing tools and frameworks used",
                    "properties": {
                        "testingFramework": {
                            "type": "string",
                            "description": "Primary testing framework",
                            "default": "[TESTING_FRAMEWORK]"
                        },
                        "mockingLibrary": {
                            "type": "string",
                            "description": "Library used for mocking",
                            "default": "[MOCKING_LIBRARY]"
                        },
                        "testUtilities": {
                            "type": "array",
                            "description": "Additional testing utilities",
                            "items": {
                                "type": "string",
                                "default": "[TEST_UTILITY]"
                            }
                        }
                    }
                }
            }
        },
        "documentation": {
            "type": "object",
            "description": "Documentation strategy and resources for state management",
            "required": [
                "documentationStrategy",
                "guidelines",
                "resources"
            ],
            "properties": {
                "documentationStrategy": {
                    "type": "object",
                    "description": "Overall documentation strategy",
                    "properties": {
                        "approach": {
                            "type": "string",
                            "description": "Documentation approach",
                            "default": "[DOCUMENTATION_APPROACH]"
                        },
                        "maintenance": {
                            "type": "string",
                            "description": "How documentation is maintained",
                            "default": "[DOCUMENTATION_MAINTENANCE]"
                        },
                        "audience": {
                            "type": "array",
                            "description": "Target audience for documentation",
                            "items": {
                                "type": "string",
                                "default": "[DOCUMENTATION_AUDIENCE]"
                            }
                        }
                    }
                },
                "guidelines": {
                    "type": "object",
                    "description": "Guidelines and best practices documentation",
                    "properties": {
                        "codingStandards": {
                            "type": "string",
                            "description": "Coding standards for state management",
                            "default": "[CODING_STANDARDS]"
                        },
                        "bestPractices": {
                            "type": "array",
                            "description": "Best practices documentation",
                            "items": {
                                "type": "string",
                                "default": "[BEST_PRACTICE]"
                            }
                        },
                        "troubleshooting": {
                            "type": "string",
                            "description": "Troubleshooting guide approach",
                            "default": "[TROUBLESHOOTING_APPROACH]"
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "description": "Documentation resources and references",
                    "properties": {
                        "internalDocs": {
                            "type": "array",
                            "description": "Internal documentation resources",
                            "items": {
                                "type": "string",
                                "default": "[INTERNAL_DOC_RESOURCE]"
                            }
                        },
                        "externalReferences": {
                            "type": "array",
                            "description": "External references and resources",
                            "items": {
                                "type": "string",
                                "default": "[EXTERNAL_REFERENCE]"
                            }
                        },
                        "examples": {
                            "type": "string",
                            "description": "How examples are provided and maintained",
                            "default": "[EXAMPLES_APPROACH]"
                        }
                    }
                }
            }
        }
    }
}